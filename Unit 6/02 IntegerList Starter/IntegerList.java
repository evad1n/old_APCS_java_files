// ****************************************************************// IntegerListTest.java////Will Dickinson//2/4/2016//          // ****************************************************************public class IntegerList{    int[] list; //values in the list    //-------------------------------------------------------    //create a list of the given size    // input: an int variable named size    // output: none, this is a constructor    // assign array to list; the number of elements in    // list is stored in size     // THIS IS A CONSTRUCTOR    //-------------------------------------------------------    public IntegerList(int size)    {        list = new int[size];    }    //-------------------------------------------------------    //fill array with integers between 1 and 100, inclusive    // input: none    // output: none    // modifies list array to populate the array as     // described above    // THIS IS A SETTER (OR MODIFIER)    //-------------------------------------------------------    public void randomFill()    {        for (int i=0; i<list.length; i++)            list[i] = (int)(Math.random()*100) + 1;    }    //-------------------------------------------------------    //print array elements with indices    // input: none    // output: none    // prints using the following format:    // if the array is [4, 7, 2, 10],    // this method should print:    //  0   4    //  1   7    //  2   2      //  3   10    // THIS IS AN ACCESSOR (GETTER)    //-------------------------------------------------------    public void print()    {        for (int i=0; i<list.length; i++)            System.out.println(i + ":\t" + list[i]);    }    //-------------------------------------------------------    //return the index of the first occurrence of target in     //the list.    // input: int target    // output: location of target in list[], -1 if not found    // uses sequential search algorithm    // THIS IS AN ACCESSOR(GETTER)    //-------------------------------------------------------    public int search(int target)    {       int location = -1;       for (int i=0; i<list.length && location == -1; i++)            if (list[i] == target)                location = i;           return location;    }    //-------------------------------------------------------    //sort the list into ascending order using the selection     //sort algorithm    // input: none, list is instance data    // output: none, instance data is modified    // THIS IS A MODIFIER (SETTER)    //-------------------------------------------------------    public void selectionSort()    {        int minIndex;        for (int i=0; i < list.length-1; i++)        {            //find smallest element in list starting at location i            minIndex = i;            for (int j = i+1; j < list.length; j++)                if (list[j] < list[minIndex])                    minIndex = j;            //swap list[i] with smallest element            int temp = list[i];            list[i] = list[minIndex];            list[minIndex] = temp;         }    }        public void sortDecreasing ()    {        int maxIndex;        for (int i=0; i < list.length-1; i++)        {            //find largest element in list starting at location i            maxIndex = i;            for (int j = i+1; j < list.length; j++)                if (list[j] > list[maxIndex])                    maxIndex = j;            //swap list[i] with largest element            int temp = list[i];            list[i] = list[maxIndex];            list[maxIndex] = temp;         }    }        public void replaceFirst (int newVal, int location)    {        list[location] = newVal;    }        public void replaceAll (int oldVal, int newVal)    {       for (int i=0; i < list.length; i++)            if (list[i] == oldVal)                list[i] = newVal;    }        public int binarySearch (int target, String sortType)    {        int low = 0;        int high = list.length - 1;        while(high >= low)        {            int middle = (high + low)/2;            if(list[middle] == target)            {                return middle;            }            if(sortType.equals("increasing"))            {                if(list[middle] > target)                {                    high = middle - 1;                }                if(list[middle] < target)                {                    low = middle + 1;                }            }            if(sortType.equals("decreasing"))            {                if(list[middle] > target)                {                    low = middle + 1;                }                if(list[middle] < target)                {                    high = middle - 1;                }            }        }        return -1;    }        public void insertionSort ()    {        for (int i = 1; i < list.length; i++)        {            int key = list[i];            int position = i;                        while (position > 0 && list[position-1] > key)            {                list[position] = list[position-1];                position--;            }                        list[position] = key;        }    }}